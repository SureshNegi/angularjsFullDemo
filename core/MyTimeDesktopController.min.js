angular.module("MyTimeApp").controller("loginDesktopCtrl", ["$rootScope", "$scope", "loginService", "$state", "loadRevenueMonthsServices", "$filter", "constantService", "$modal", "$cookieStore", "$interval", "$window", "$timeout", "openPopUpWindowFactory", "preferencesService", "$translate", "i18nService", "$modalStack", "maintenanceService", function (e, t, a, r, o, n, i, s, l, d, c, g, p, u, m, C, f, h) { function D(t) { e.errorLogMethod("loginDesktopCtrl.getCookie"); for (var a = t + "=", r = document.cookie.split(";"), o = 0; o < r.length; o++) { for (var n = r[o]; " " == n.charAt(0) ;) n = n.substring(1); if (0 == n.indexOf(a)) return n.substring(a.length, n.length) } return "" } t.username = D("cookieWindowUserName"), t.lgnPlacHolderVal = "<Enter Password>", 1 == e.isSessionExists && (e.isSessionExists = !1, r.go("SessionExpire"), angular.element(c).off("beforeunload")), $(window).bind("capsOn", function (e) { $("#txtLoginPassword:focus").length > 0 && (document.getElementById("divCapsIndicator").style.visibility = "visible") }), $(window).bind("capsOff capsUnknown", function (e) { document.getElementById("divCapsIndicator").style.visibility = "hidden" }), $("#txtLoginPassword").bind("focusout", function (e) { document.getElementById("divCapsIndicator").style.visibility = "hidden" }), $("#txtLoginPassword").bind("focusin", function (e) { !0 === $(window).capslockstate("state") && (document.getElementById("divCapsIndicator").style.visibility = "visible") }), $("#txtLoginUserName").on("contextmenu", function (e) { e.preventDefault() }), $("#txtLoginPassword").on("contextmenu", function (e) { e.preventDefault() }), $("#txtNewPassword").on("contextmenu", function (e) { e.preventDefault() }), $("#txtCnfrmPassword").on("contextmenu", function (e) { e.preventDefault() }), t.timedDisplay = "", t.timerLogin = null, t.loginUsernameWatermarkText = "<Enter Username>", D("cookieWindowUserName").length > 0 && $("#txtLoginPassword").focus(), e.transactionMessage = 'Your transaction has timed out. Please click "OK" and try again.', t.password = "", t.message = "", t.previousUsername = "", t.newPswrd = "", t.cnfrmPswrd = "", t.isUsernameSaved = D("cookieWindowUserName").length > 0, t.lockMessage = "Your username and password are the same as your network username and password. Your network account will be locked after ##count## more unsuccessful login attempt##s##. If you need assistance please contact the service desk.", t.lockedAccountMessage = "Your username and password are the same as your network username and password. Your network account is now locked. You must wait 10 minutes before you can try to access your account again. If you need assistance please contact the service desk.", t.loginNote = "Login using your network username and password.", e.loginMessage = "Login using your network username and password.", t.clientType = "iPhone", t.defaultPassword = "mercer", t.nonADPassError = "Access Denied. Please change your password on the desktop version of myTime.", t.applicationVersion = i.APPVERSION, null != localStorage.getItem("Initial_Data") && (e.displayUsername = e.GetInitialDetail(!1, !0).EMPL_REC.FNAME + " " + e.GetInitialDetail(!1, !0).EMPL_REC.LNAME), t.sessionExpire = "", t.enableLoginFlag = !0, t.inactivePass = n("translate")("msg_inactivePass"), t.newPassEmail = n("translate")("msg_newPassEmail", { nonadusernameVar: e.nonadusername }), t.rememberUsername = function () { e.errorLogMethod("loginCtrl.scope.rememberUsername"), $("#rmembrChck").is(":checked") || (document.cookie = "cookieWindowUserName=; expires=Thu, 01 Jan 1970 00:00:01 GMT;") }, isMobile = { BlackBerry: function () { return navigator.userAgent.match(/BlackBerry/i) }, BB: function () { return navigator.userAgent.match(/BB/) }, iPhone: function () { return navigator.userAgent.match(/iPhone/i) }, iPad: function () { return navigator.userAgent.match(/iPad/i) }, any: function () { return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows() } }, t.getClientType = function () { return isMobile.iPhone() ? "iPhone" : isMobile.iPad() ? "iPad" : isMobile.BlackBerry() ? "BlackBerry" : isMobile.BB() ? "BlackBerry" : "Other" }, t.closetimeout = function () { g(function () { f.dismissAll() }, 100), e.isTimeOut || S(), e.transactionTimeout && f.dismissAll(), e.isTimeOut = !1, r.go("login") }, t.fieldEmpty = n("translate")("msg_noUsrNm"), t.IsValueMouseOverDiv = function () { t.username = $("#txtLoginUserName").val(), t.password = $("#txtLoginPassword").val(), "" == t.username & "" != t.password ? t.fieldEmpty = "No username is provided." : "" != t.username & "" != t.password ? t.fieldEmpty = "" : "" != t.username & "" == t.password ? t.fieldEmpty = "No password is provided." : "" == t.username & "" == t.password && (t.fieldEmpty = "No username is provided.") }, t.IsValue = function () { "" == t.username & "" != t.password ? (t.fieldEmpty = "No username is provided.", t.enableLoginFlag = !0) : "" != t.username & "" != t.password ? (t.fieldEmpty = "", t.enableLoginFlag = !1) : "" != t.username & "" == t.password ? (t.fieldEmpty = "No password is provided.", t.enableLoginFlag = !0) : "" == t.username & "" == t.password ? (t.fieldEmpty = "No username is provided.", t.enableLoginFlag = !0) : t.enableLoginFlag = !0 }, t.resetField = function () { t.username = "", t.IsValue() }, t.fieldEmptyChangePswrd = n("translate")("msg_noNewPswrd"), t.enableCnfrmPswrdFlag = !0, t.IsChangeValue = function () { "" == t.newPswrd && "" == t.cnfrmPswrd ? (t.fieldEmptyChangePswrd = n("translate")("msg_noNewPswrd"), t.enableCnfrmPswrdFlag = !0) : "" != t.newPswrd && "" == t.cnfrmPswrd ? (t.fieldEmptyChangePswrd = n("translate")("msg_noNewCnfrmPswrd"), t.enableCnfrmPswrdFlag = !0) : "" != t.newPswrd && "" != t.cnfrmPswrd ? ("" == t.cnfrmPswrd && (t.fieldEmptyChangePswrd = n("translate")("msg_noNewCnfrmPswrd"), t.enableCnfrmPswrdFlag = !0), t.newPswrd != t.cnfrmPswrd ? (t.fieldEmptyChangePswrd = n("translate")("msg_noPswrdMatch"), t.enableCnfrmPswrdFlag = !0) : (t.fieldEmptyChangePswrd = "", t.enableCnfrmPswrdFlag = !1)) : t.newPswrd != t.cnfrmPswrd && "" == t.newPswrd && "" != t.cnfrmPswrd ? (t.fieldEmptyChangePswrd = n("translate")("msg_noNewPswrd"), t.enableCnfrmPswrdFlag = !0) : t.newPswrd != t.cnfrmPswrd && "" != t.newPswrd && "" == t.cnfrmPswrd && (t.fieldEmptyChangePswrd = n("translate")("msg_noNewCnfrmPswrd"), t.enableCnfrmPswrdFlag = !0) }, t.resetField = function () { t.username = "", t.IsValue() }, t.checkDisable = function () { return e.errorLogMethod("loginDesktopCtrl.scope.checkDisable"), t.enableLoginFlag }, t.getVersion = function () { return "Version: " + i.APPVERSION }; t.loadRevenueMonths = function () { e.errorLogMethod("loginDesktopCtrl.scope.loadRevenueMonths"); var t = new Date; t = n("date")(t, "yyyy-MM-dd"); var a = e.GetLoginDetail(!1, !0); o.loadRevenueMonths(a.SESKEY, t, function (e) { var t = e.LOADREVM_OUT_OBJ.REVM_ARR; localStorage.setItem("Revenue_Months", JSON.stringify(t)) }) }, t.Cancel = function () { e.errorLogMethod("loginDesktopCtrl.scope.Cancel"); var o = escape(t.username); a.SetCredentials(o, t.password), localStorage.setItem("isLoggedIn", "true"), e.isFromloginPage = !0, r.go("MainDesktop") }, t.login = function () { if (e.globals = l.get("globals") || {}, null != localStorage.getItem("isLoggedIn") && "true" == localStorage.getItem("isLoggedIn") && null != localStorage.getItem("Login_Detail") && e.globals.currentUser) r.go("SessionExpire"); else { e.initialLoadingMessage = i.DESKTOPLOADMESSAGE, e.initialLoadingMessageTemp = i.DESKTOPLOADMESSAGE, e.transactionTimeout = !1, e.loadingImgHidden = !1, e.isChangePasswordCancelButton = !1, e.loginMessage = "Login using your network username and password.", e.resetpaswword = "", e.errorLogMethod("loginDesktopCtrl.scope.login"), e.expandedEntries = [], e.collapsedEntries = [], e.cntrExpandCollapse = 0; var o = escape(t.username); a.ClearCredentials(), e.ClearLocalStorage(!0), localStorage.isEnglishLang = !0, e.isEnglishLang = !0; var s = 0; null != localStorage.getItem(t.username + "_attempts") && (s = localStorage.getItem(t.username + "_attempts")), localStorage.setItem(t.username + "_attempts", s); var d = escape(navigator.userAgent); d = d.substring(0, 100); var p = null; a.login(o, t.password, t.getClientType(), t.applicationVersion, d, function (l) { if (e.chartExcludeWkndFlag = !1, 4 == parseInt(l.LOGIN_OUT_OBJ.RETCD)) h.maintenanceNotification(l.LOGIN_OUT_OBJ.ERRMSG); else if (0 == parseInt(l.LOGIN_OUT_OBJ.RETCD)) p = l, localStorage.removeItem(t.username + "_attempts"), angular.element(c).on("beforeunload", function (e) { e.preventDefault() }), localStorage.setItem("Login_Detail", JSON.stringify(l.LOGIN_OUT_OBJ)), t.LOGIN_OUT_OBJ = l.LOGIN_OUT_OBJ, a.retrieveInitialData(l.LOGIN_OUT_OBJ.SESKEY, l.LOGIN_OUT_OBJ.EMPLID).then(function (s) { if (0 == parseInt(s.RETINIT_OUT_OBJ.RETCD)) { "Y" == l.LOGIN_OUT_OBJ.ISNONAD && (e.nonADDetailsPassword = angular.copy(t.password)), localStorage.revnotsetup = null, localStorage.setItem("Initial_Data", JSON.stringify(s.RETINIT_OUT_OBJ)), localStorage.removeItem("Revenue_Months"), t.loadRevenueMonths(), localStorage.setItem("InitialRev_Month", JSON.stringify(s.RETINIT_OUT_OBJ)); new Date(s.RETINIT_OUT_OBJ.REVM_REC.STRTDTE), new Date(s.RETINIT_OUT_OBJ.REVM_REC.ENDDTE), new Date; var d = e.GetInitialDetail(!1, !0); if (t.tEBill = d.COMP_REC.LCKSTAT, "Y" == t.tEBill) e.ClearLocalStorage(!0), t.message = n("translate")("msg_TimeNotAv"); else { var c = s.RETINIT_OUT_OBJ.PREF_ARR, f = "EN"; u.loadGlobalPreferences(l.LOGIN_OUT_OBJ.SESKEY).then(function (s) { if (0 == parseInt(s.GLBPREF_OUT_OBJ.RETCD)) { var l = s.GLBPREF_OUT_OBJ.GLBPREF, d = null; if (localStorage.setItem("globalPref", JSON.stringify(l)), void 0 !== c && null !== c && "[object Array]" != Object.prototype.toString.call(c)) { var u = c; (c = []).push({ KEY: u.PREF_OBJ.KEY, VAL: u.PREF_OBJ.VAL }) } null !== c && (d = c.filter(function (e) { return "LANG" === e.KEY })), null !== d && d.length > 0 ? f = d[0].VAL : ((d = l.filter(function (e) { return "LANG" === e.KEY })).length > 0 && (d = d[0].KEYVAL_ARR), d = d.filter(function (e) { return "Y" == e.DEF }), f = d[0].KEYVAL), "EN" == f ? i.CURRENTLANGUAGE = i.ENGLISHLANGUAGEKEY : (i.CURRENTLANGUAGE = i.FRENCHLANGUAGEKEY, localStorage.isEnglishLang = !1), m.use(i.CURRENTLANGUAGE), C.setCurrentLang(i.CURRENTLANGUAGE) } if ("true" == localStorage.isEnglishLang ? e.isEnglishLang = !0 : e.isEnglishLang = !1, angular.lowercase(t.password) == t.defaultPassword || "Y" == p.LOGIN_OUT_OBJ.ISNONAD && angular.lowercase(t.password.substring(0, 6)) == t.defaultPassword) e.changePassword = !0, e.ntwrkMessage = n("translate")("msg_chngDfltPass"), setTimeout(function () { document.getElementById("txtNewPassword").focus() }, 500), g(function () { e.msgActive = !0 }, 100), g(function () { e.msgActive = !1 }, 600), r.go("login"); else if ("Y" == p.LOGIN_OUT_OBJ.ISNONAD && "EXPIRED(GRACE)" == p.LOGIN_OUT_OBJ.NONADPASSSTATUS) e.changePassword = !0, e.ntwrkMessage = n("translate")("msg_chngDfltPass"), setTimeout(function () { document.getElementById("txtNewPassword").focus() }, 500), "EXPIRED(GRACE)" == p.LOGIN_OUT_OBJ.NONADPASSSTATUS ? (e.isChangePasswordCancelButton = !0, e.ntwrkMessage = n("translate")("lbl_pswrdExpr1") + p.LOGIN_OUT_OBJ.NONADDAYSTOEXPIRE + n("translate")("lbl_pswrdExpr2")) : e.isChangePasswordCancelButton = !1, g(function () { e.msgActive = !0 }, 100), g(function () { e.msgActive = !1 }, 600), r.go("login"); else { if (a.SetCredentials(o, t.password), localStorage.setItem("isLoggedIn", "true"), e.isFromloginPage = !0, $("#rmembrChck").is(":checked")) { var h = new Date; h.setTime(h.getTime() + 31536e6), document.cookie = "cookieWindowUserName =" + t.username + ";expires=" + h.toUTCString() } else document.cookie = "cookieWindowUserName=; expires=Thu, 01 Jan 1970 00:00:01 GMT;"; r.go("MainDesktop") } }) } } else "" != s.RETINIT_OUT_OBJ.ERRMSG.trim() && (t.message = s.RETINIT_OUT_OBJ.ERRMSG) }); else if ("Y" == l.LOGIN_OUT_OBJ.ISNONAD && "INACTIVE" == l.LOGIN_OUT_OBJ.NONADPASSSTATUS) e.isInactiveNonADPassword = !0, g(function () { document.getElementById("nonadinactiveyes").focus() }), e.nonadusername = l.LOGIN_OUT_OBJ.NONADUSERNAME, e.nonADDetails = l.LOGIN_OUT_OBJ, "EN" == l.LOGIN_OUT_OBJ.NONADLANG ? i.CURRENTLANGUAGE = i.ENGLISHLANGUAGEKEY : (i.CURRENTLANGUAGE = i.FRENCHLANGUAGEKEY, localStorage.isEnglishLang = !1), m.use(i.CURRENTLANGUAGE), t.message = ""; else if ("" != l.LOGIN_OUT_OBJ.ERRMSG.trim()) { var d = l.LOGIN_OUT_OBJ.ERRMSG.toLowerCase().indexOf("[52e]") > -1, f = l.LOGIN_OUT_OBJ.ERRMSG.toLowerCase().indexOf("[775]") > -1, D = localStorage.getItem(t.username + "_attempts"), S = parseInt(D); d && (S = parseInt(s) + 1), localStorage.removeItem(t.username + "_attempts"), localStorage.setItem(t.username + "_attempts", S); var T = t.lockMessage; f ? (localStorage.removeItem(t.username + "_attempts"), localStorage.setItem(t.username + "_attempts", 0), t.message = t.lockedAccountMessage) : 1 == S && d ? t.message = T.replace("##count##", "5").replace("##s##", "s") : 2 == S && d ? t.message = T.replace("##count##", "4").replace("##s##", "s") : 3 == S && d ? t.message = T.replace("##count##", "3").replace("##s##", "s") : 4 == S && d ? t.message = T.replace("##count##", "2").replace("##s##", "s") : 5 == S && d ? t.message = T.replace("##count##", "1").replace("##s##", "") : 6 == S && d ? (localStorage.removeItem(t.username + "_attempts"), localStorage.setItem(t.username + "_attempts", 0), t.message = t.lockedAccountMessage) : t.message = l.LOGIN_OUT_OBJ.ERRMSG } else "" == l.LOGIN_OUT_OBJ.ERRMSG.trim() && 2 == parseInt(response.RETINIT_OUT_OBJ.RETCD) && (t.message = "") }) } }, t.visibleNtwrkMsg = !0, t.change = function () { e.errorLogMethod("loginDesktopCtrl.scope.change"), t.visibleNtwrkMsg = !1; var o = /^(?=.*?[0-9])/, n = /^[ A-Za-z0-9_@[{}|\\"';:~`<>?,!_\]$%^*()=./#&+-]*$/, i = /^(?=.*[A-Z]).{1,}$/; if (t.newPswrd.length < 8) t.confrmMessage = "Password must be at least 8 characters long."; else if (o.test(t.newPswrd)) if (!i.test(t.newPswrd) & !n.test(t.newPswrd)) t.confrmMessage = "Passwords must include at least one punctuation mark, symbol, or alternate case (upper/lower)."; else { var s = e.GetLoginDetail(!1, !0); "Y" == s.ISNONAD ? a.changePassword(s.SESKEY, t.newPswrd, e.nonADDetailsPassword, function (o) { if (0 == parseInt(o.CHPW_OUT_OBJ.RETCD)) { var n = escape(t.username); a.SetCredentials(n, t.newPswrd), localStorage.setItem("isLoggedIn", "true"), e.isFromloginPage = !0, r.go("MainDesktop") } else "" != o.CHPW_OUT_OBJ.ERRMSG.trim() && (t.confrmMessage = o.CHPW_OUT_OBJ.ERRMSG) }) : a.changePassword(s.SESKEY, t.newPswrd, t.defaultPassword, function (o) { if (0 == parseInt(o.CHPW_OUT_OBJ.RETCD)) { var n = escape(t.username); a.SetCredentials(n, t.newPswrd), localStorage.setItem("isLoggedIn", "true"), e.isFromloginPage = !0, r.go("MainDesktop") } else "" != o.CHPW_OUT_OBJ.ERRMSG.trim() && (t.confrmMessage = o.CHPW_OUT_OBJ.ERRMSG) }) } else t.confrmMessage = "Passwords must include at least one numeric (0-9) character" }, t.$on("LogoutGridLayout", function (a, r) { e.errorLogMethod("loginDesktopCtrl.scope.$on.LogoutGridLayout"), t.logout() }), t.$on("maintenanceNotificationBroadcast", function (t, a) { e.errorLogMethod("loginDesktopCtrl.scope.$on.maintenanceNotificationBroadcast"), f.dismissAll(); var r = a.value; h.maintenanceNotification(r) }), t.logout = function () { if (e.errorLogMethod("loginDesktopCtrl.scope.logout"), "1" == localStorage.getItem("isMainGridLayoutChange")) { if (!e.dailyCustomFlag && "true" == localStorage.isDailyMode || !e.weeklyCustomFlag && "false" == localStorage.isDailyMode) o = { msgList: [n("translate")("msg_cfrmMainGridSveLayOut")], isCancelBtnOn: !0, okBtnText: n("translate")("btn_Yes"), noBtnTxt: n("translate")("btn_No"), popUpName: "ConfrmSaveMainGrdLayout", methodName: "logout" }; else o = { msgList: [n("translate")("msg_overrideMainGridSveLayOut")], isCancelBtnOn: !0, okBtnText: n("translate")("btn_Yes"), noBtnTxt: n("translate")("btn_No"), popUpName: "OverrideSaveMainGrdLayout", methodName: "logout" }; p.openModalPopUp("Desktop/Home/templates/ConfirmBox.html", "ConfirmBoxCtrl", o) } else if (e.columnBlank) { var o = { errorList: e.isCategory ? [n("translate")("msg_invalidProjectComponent")] : [n("translate")("lbl_actvtyNoValid")], isProjectTaskInvalid: !0 }; t.openModalCtrl = "showValidationMsg", p.openModalPopUp("Desktop/NewEntry/templates/AlertBoxSave.html", "ErrorDesktopPopupCtrl", o) } else { e.transactionTimeout = !1, e.loadingImgHidden = !1, e.rowIndex = void 0, e.isLineClicked = !0, e.changePassword = !1; var i = escape(navigator.userAgent); i = i.substring(0, 100), e.isPanelOpen = !1, e.isCallAtInterval = !1, e.expandedEntries = [], e.collapsedEntries = [], e.cntrExpandCollapse = 0, d.cancel(e.callBroadcastAtInterval), d.cancel(e.callMonthEndAtInterval), e.isCallBroadcastAtInterval = !1; var s = e.GetLoginDetail(!0, !0); a.ClearCredentials(), e.ClearLocalStorage(!0), a.logout(s.SESKEY, i, function (t) { e.ClearLocalStorage(!0), angular.element(c).off("beforeunload"), r.go("login") }) } }, t.$on("sessionExpire", function (t, a) { e.errorLogMethod("loginDesktopCtrl.scope.$on.sessionExpire"), e.isTimeOut && (e.isTimeOut = !1, r.go("login")) }), t.$on("transactionTimeout", function (t, a) { e.errorLogMethod("loginDesktopCtrl.scope.$on.transactionTimeout"), f.dismissAll(), e.transactionTimeout = !0, s.open({ templateUrl: "timedout-dialogDesktop.html", windowClass: "modal-danger" }).result.then(function () { }, function () { f.dismissAll(), r.go("login") }) }), t.$on("LogOut", function (a, r) { e.errorLogMethod("loginDesktopCtrl.scope.$on.LogOut"), t.logout() }), t.sessionExpireOk = function () { e.errorLogMethod("loginDesktopCtrl.scope.sessionExpireOk"), g(function () { f.dismissAll() }, 100), e.isTimeOut || S(), e.transactionTimeout && f.dismissAll(), e.isTimeOut = !1, r.go("login") }, t.sessionExpireInit = function () { e.errorLogMethod("loginDesktopCtrl.scope.sessionExpireInit"), angular.element(document.getElementsByClassName("modal-dialog")).addClass("positionTop"), angular.element(document.getElementsByClassName("modal-content")).addClass("mcontent"), e.isTimeOut ? (t.sessionExpire = n("translate")("msg_SessionExpire"), e.isCallAtInterval = !1, S()) : (e.isCallAtInterval = !1, t.sessionExpire = n("translate")("msg_SessionInvalid")) }, t.showUntilSeconds = function (e) { var a = "", r = ""; a = void 0 != t.username && 0 == t.username.length ? "UN " : "", r = 0 == t.password.length ? "PW " : "", t.$apply(function () { t.timedDisplay = a + r }), null != t.timerLogin && g.cancel(t.timerLogin), t.timerLogin = g(function () { t.timedDisplay = "" }, 1e3 * parseInt(e)) }, $(".timedDisplay").mouseover(function () { t.showUntilSeconds(i.DESKTOPDISPLAYSECONDS) }), $(".timedDisplay").keyup(function () { t.showUntilSeconds(i.DESKTOPDISPLAYSECONDS) }); var S = function () { e.errorLogMethod("loginDesktopCtrl.scope.sessionOut"); var t = escape(navigator.userAgent); t = t.substring(0, 100), e.isPanelOpen = !1; var r = e.GetLoginDetail(!0, !1); null != r && (d.cancel(e.callBroadcastAtInterval), d.cancel(e.callMonthEndAtInterval), e.isCallBroadcastAtInterval = !1, a.ClearCredentials(), a.logout(r.SESKEY, t, function (t) { parseInt(t.LOGOUT_OUT_OBJ.RETCD), e.ClearLocalStorage(!0) })) }; e.initialLoadingMessage = n("translate")("msg_wait"), e.initialLoadingMessageTemp = n("translate")("msg_wait"), t.proceed = function () { e.errorLogMethod("loginDesktopCtrl.scope.proceed"), e.resetpaswword = "", e.loginMessage = "", t.message = "", a.resetPassword(parseInt(e.nonADDetails.EMPLID), function (t) { 0 == parseInt(t.RESETPW_OUT_OBJ.RETCD) && (e.resetpaswword = "Login using your network username and password.", e.resetpaswword += "<br/>", e.resetpaswword += " Email sent.", e.loginMessage = angular.copy(e.resetpaswword), e.isInactiveNonADPassword = !1) }) }, t.close = function () { e.errorLogMethod("loginDesktopCtrl.scope.close"), e.isInactiveNonADPassword = !1 } }]).controller("ConfirmMessage", ["$rootScope", "$scope", "$modalInstance", "$state", "selectedData", function (e, t, a, r, o) { t.popUpName = "ConfirmMessage", t.selectedData = o, t.isCancelBtnOn = o.isCancelBtnOn, t.ok = function () { e.errorLogMethod("ConfirmMessage.$scope.ok"), a.close() }, t.cancel = function () { e.errorLogMethod("ConfirmMessage.$scope.cancel"), a.dismiss("cancel") }, t.isError = !1, t.message = "", t.init = function () { e.errorLogMethod("ConfirmMessage.$scope.init"), t.isError = t.selectedData.isError, t.message = t.selectedData.message, t.isDailyModeOption = t.selectedData.isDailyModeOption } }]).controller("HomeCtrl", "$rootScope", ["$scope", function (e, t) { e.TotalPages = 0, e.PageNumber = 0, e.DataPerPage = 0, e.$on("update_child_controller", function (a, r, o, n) { t.errorLogMethod("HomeCtrl.$scope.$on.update_child_controller"), e.TotalPages = r, e.PageNumber = o, e.DataPerPage = n }) }]).controller("calDesktopController", ["$scope", "$rootScope", "$filter", "$localStorage", "broadcastService", "loadRevenueMonthsServices", function (e, t, a, r, o, n) { e.dateSubmitArray = [], void 0 != r.dateVal && (e.dateSubmitArray = null, e.dateSubmitArray = angular.fromJson(r.dateVal), e.dateSubmitArray.formats = "dd/MM/yyyy"), e.move = function (e) { t.errorLogMethod("calDesktopController.$scope.move"), o.notifyMoveCalendar(e) }, e.todayNew = function () { t.errorLogMethod("calDesktopController.$scope.todayNew"), o.notifyTodayCalendar() }, e.yearUp = function () { t.errorLogMethod("calDesktopController.$scope.yearUp"); var r = a("date")(new Date(e.dt), "yyyy-MM-dd"), n = new Date(r); e.dt = new Date(e.dt), e.dt.setYear(n.getFullYear() + 1), e.dt.setHours(0, 0, 0, 0), o.notifyYearUpCalendar(e.dt) }, e.yearDown = function () { t.errorLogMethod("calDesktopController.$scope.yearDown"); var r = a("date")(new Date(e.dt), "yyyy-MM-dd"), n = new Date(r); e.dt = new Date(e.dt), e.dt.setYear(n.getFullYear() - 1), e.dt.setHours(0, 0, 0, 0), o.notifyYearUpCalendar(e.dt) }, e.today = function () { t.errorLogMethod("calDesktopController.$scope.today"), t.isMobileOrTab ? e.dt = new Date : e.dt = angular.copy(t.currentSelectedDate) }, e.today(), e.$on("updateUiCalSelectedDate", function (a, r) { t.errorLogMethod("calDesktopController.$scope.$on.updateUiCalSelectedDate"), e.dt = new Date(r.value.valueOf()) }); var i = t.GetInitialDetail(!1, !0).EMPL_REC.REQHRS; e.dateError = function (a, r) { t.errorLogMethod("calDesktopController.$scope.dateError"); for (var o = 0; o < e.dateSubmitArray.length; o++) if (parseFloat(e.dateSubmitArray[o].HRS) < parseFloat(i) && new Date(e.dateSubmitArray[o].DTE.substring(0, e.dateSubmitArray[o].DTE.indexOf(" "))).setHours(0, 0, 0, 0) == new Date(a).setHours(0, 0, 0, 0)) return !0 }, e.dateHighlight = function (a, r) { t.errorLogMethod("calDesktopController.$scope.dateHighlight"); for (var o = 0; o < e.dateSubmitArray.length; o++) if (parseFloat(e.dateSubmitArray[o].HRS) >= parseFloat(i) && new Date(e.dateSubmitArray[o].DTE.substring(0, e.dateSubmitArray[o].DTE.indexOf(" "))).setHours(0, 0, 0, 0) == new Date(a).setHours(0, 0, 0, 0)) return !0 }, e.dateChange = function () { t.errorLogMethod("calDesktopController.$scope.dateChange"), e.dt = new Date(angular.element(document.getElementById("selectedValue"))[0].value), localStorage.calendarchange, e.changeDate = e.dt }, e.$watch("dt", function () { t.errorLogMethod("calDesktopController.$scope.$watch.dt"); var i = a("date")(new Date(e.dt), "yyyy-MM-dd"), s = [], l = []; if ("null" == localStorage.revnotsetup && void 0 != localStorage.revnotsetup) { var d = t.GetLoginDetail(!1, !0); n.loadRevenueMonths(d.SESKEY, i, function (t) { if (void 0 != (l = t.LOADREVM_OUT_OBJ.REVM_ARR) && "undefined" != l) if (updDate = new Date(i), updDate = new Date(updDate.getTime() + 60 * updDate.getTimezoneOffset() * 1e3), void 0 != (s = angular.fromJson(l).filter(function (e) { if (null != e && e.REVM === updDate.getFullYear().toString() + ("0" + (updDate.getMonth() + 1)).slice(-2).toString()) return !0 })) && 0 != s.length) { if (void 0 != s[0].STRTDTE && "undefined" != s[0].STRTDTE) { "null" != r.currDate && void 0 != r.currDate ? e.dt = new Date(r.currDate) : "null" != localStorage.SelectedCalendardate && void 0 != localStorage.SelectedCalendardate && (e.dt = new Date(localStorage.SelectedCalendardate)); var a = angular.copy(e.dt); a.setHours(0, 0, 0, 0), (angular.isUndefined(localStorage.currentdtForGetData) || localStorage.currentdtForGetData != a) && (o.notifyUiGrid(e.dt), localStorage.currentdtForGetData = a), localStorage.clearGroupingDateChanged = "1", localStorage.revnotsetup = e.dt } } else localStorage.SelectedCalendardate = null; r.currDate = null }) } "null" != r.currDate && void 0 != r.currDate && (e.dt = r.currDate, localStorage.SelectedCalendardate = e.dt) }) }]).controller("deviceCtrl", ["$scope", "deviceDetector", function (e, t) { $rootScope.errorLogMethod("deviceCtrl.fn.deviceDetector"), e.name = "World", e.deviceDetector = t }]).controller("multidatepickerCtrlDesktop", ["$rootScope", "$scope", "$filter", "$modalInstance", "arguments", "broadcastService", "$q", "$timeout", "retrieveSharedService", function (e, t, a, r, arguments, o, n, s, l) { function d(a) { e.errorLogMethod("multidatepickerCtrlDesktop.fn.checkSelectedDates"); for (var r = new Date("1900-01-01"), o = a.length, n = JSON.parse(localStorage.getItem("Initial_Data")).REVM_REC, i = 0; i < o; i++) { var s = a.indexOf(r.setHours(0, 0, 0, 0)); if (1 == a.length && s >= 0) t.IspasteEnabled = !1; else if (new Date(a[i]) >= u(n.STRTDTE)) { t.IspasteEnabled = !0; var l = new Date(a[i]); if (0 != l.getDay() && 6 != l.getDay() || "0" != localStorage.getItem("includeweekend")) { t.IspasteEnabled = !0; break } t.IspasteEnabled = !1 } else { t.IspasteEnabled = !1; var d = new Date(a[i]); a.splice(a.indexOf(d.setHours(0, 0, 0, 0)), 1) } } } function c(e) { var t = new Date(l.getMonthName(e) + " 1, 2000").getMonth(); return isNaN(t) ? 0 : t + 1 } t.IspasteEnabled = !1, e.arrdateStart = null, t.activeDate = (new Date).setHours(0, 0, 0, 0), t.selectedDates = [], t.selectedWeekendDates = []; var g = n.defer(); t.dateDisablePromise = g.promise, t.arguments = arguments; var p = !0; t.init = function () { e.errorLogMethod("multidatepickerCtrlDesktop.$scope.init"), t.currentDateValue = angular.copy(t.arguments.currentDateValue) }, t.isDateDisabled = function (t, a) { return e.errorLogMethod("deviceCtrl.$scope.isDateDisabled"), !(!p || "day" != a) && (0 === t.getDay() || 6 === t.getDay()) }, t.includeWeekend = function (a, r) { e.errorLogMethod("multidatepickerCtrlDesktop.$scope.includeWeekend"), t.$broadcast("includeWeekend"), document.getElementById(a).checked ? (localStorage.setItem("includeweekend", "1"), p = !1) : (localStorage.setItem("includeweekend", "0"), p = !0), g.notify((new Date).getTime()); var o = angular.copy(r); r = []; for (var n = 0; n < o.length; n++) r.push(o[n]); d(r) }, t.paste = function (a) { if (e.errorLogMethod("multidatepickerCtrlDesktop.$scope.paste"), !$(".paste-btn").hasClass("pasteadvance")) { for (var o = new Date("1900-01-01"), n = 0; n < a.length; n++) { var i = a.indexOf(o.setHours(0, 0, 0, 0)); 0 == i && a.splice(i, 1) } a.length > 0 && (t.IspasteEnabled = !0, r.close(a)) } }, t.reset = function (a) { if (e.errorLogMethod("multidatepickerCtrlDesktop.$scope.reset"), !$(".paste-btn").hasClass("pasteadvance")) { for (var r = a.length, o = 0; o < r; o++) { var n = new Date(a[o]); a.splice(a.indexOf(n), 1), $(".paste-btn").addClass("pasteadvance"), $(".re-btn").addClass("resetadvance") } r > 0 && t.$broadcast("refreshDatepickers"), t.IspasteEnabled = !1 } }, t.multidateChange = function (a) { e.errorLogMethod("multidatepickerCtrlDesktop.$scope.multidateChange"), 0 != a.length ? d(a) : (t.IspasteEnabled = !1, $(".paste-btn").addClass("pasteadvance"), $(".re-btn").addClass("resetadvance")), e.selectedDates = a }, t.closeMultidatepicker = function (t) { e.errorLogMethod("multidatepickerCtrlDesktop.$scope.closeMultidatepicker"), e.pasteAdvancePopup = !1; for (var a = t.length, o = 0; o < a; o++) { var n = new Date(t[o]); t.splice(t.indexOf(n), 1) } r.close() }, t.today = function (t) { e.errorLogMethod("multidatepickerCtrlDesktop.$scope.today"), o.notifyMultidatepickerTodayCalendar() }; var u = function (e) { if (void 0 != e) { var t = e.split("-"), a = t[2].split(" "); return new Date(t[0], t[1] - 1, a[0]) } return null }; s(function () { function t(e, t) { var a = new Date("sessiontimeout"), r = l.getCurrentRevenueStartEndDate(), o = e; parseInt(a.getMonth()) + 1 > e && a.getFullYear() == t && (o = parseInt(u(r.STRTDTE).getMonth() + 1)), a.getFullYear() == t && (e = parseInt(u(r.STRTDTE).getMonth() + 1)), $(".multidatecont .yearContainerinner").each(function () { $(this).find("li").each(function () { $(this).text() == t && $(this).children().addClass("liActive"), parseInt($(this).text()) < parseInt(t) && a.getFullYear() > parseInt($(this).text()) && $(this).children().addClass("liDisabled") }) }), $(".multidatecont .monthContainer").each(function () { $(this).find("li").each(function () { c($(this).text()) == o && $(this).children().addClass("liActive"), a.getFullYear() == t && c($(this).text()) < e ? $(this).children().addClass("liDisabled") : c($(this).text()) < parseInt(e) && a.getFullYear() > parseInt(t) && $(this).children().addClass("liDisabled") }) }) } $("#pasteAdvanceDiv .pasteAdvCalendar .calWeekbtnCont .caltodayCont.multidatecont .datepickerCont .month-head .btnMultiDatePickerCal").click(function () { $(".calAdvCalOver.calendarOver").animate({ top: 0 }); var e = $(".btnMultiDatePickerCal .ng-binding").text().split(" "); $(".multidatecont .monthContainer ul li a").removeClass("liActive"), $(".multidatecont .yearContainerinner ul li a").removeClass("liActive"), $(".multidatecont .monthContainer ul li a").removeClass("liDisabled"), $(".multidatecont .yearContainerinner ul li a").removeClass("liDisabled"), GetRevenueYearMonthDetail(new Date(e[1], parseInt(c(e[0])) - 1, 1)) }), $("#pasteAdvanceDiv .pasteAdvCalendar .calWeekbtnCont .caltodayCont.multidatecont .calendarOver.calAdvCalOver .cancelCalPopup").click(function () { $(".calAdvCalOver.calendarOver").animate({ top: -275 }) }), $(".multidatecont .selectOC .cancelCalPopup").click(function () { $(".multidatecont .calendarOver").animate({ top: "-276px" }, 300) }), $(".multidatecont .selectOC .selectCalDate").click(function () { $(".multidatecont .calendarOver").animate({ top: "-276px" }, 300) }), $(".multidatecont .monthContainer ul li a").click(function () { $(this).hasClass("liDisabled") || ($(".multidatecont .monthContainer ul li a").removeClass("liActive"), $(this).addClass("liActive")) }); var r = parseInt(new Date("sessiontimeout").getFullYear() - 1); GetRevenueYearMonthDetail = function (r) { var o = e.chekRevDateInLocalStorage(r, a("translate")("msg_invalidSession"), !1); if (null != o) { var n = u(o.ENDDTE); t(parseInt(n.getMonth()) + 1, n.getFullYear()) } else t(parseInt(r.getMonth()) + 1, r.getFullYear()) }, function () { for (i = 0; i <= 2; i++) $("#pasteAdvanceDiv .calWeekbtnCont .caltodayCont.multidatecont .calendarOver.calAdvCalOver .monthYearCont .yearContainer .yearContainerinner #firstColYear1").append("<li><a href='javascript:void(0)'>" + r + "</a></li>"), r += 1; $("#pasteAdvanceDiv .pasteAdvCalendar.desktopAdvCalendar .calWeekbtnCont .caltodayCont.multidatecont .calendarOver.calAdvCalOver .monthYearCont .yearContainer .yearContainerinner #firstColYear1 li a").click(function () { if (!$(this).hasClass("liDisabled")) { $("#pasteAdvanceDiv .pasteAdvCalendar.desktopAdvCalendar .calWeekbtnCont .caltodayCont.multidatecont .calendarOver.calAdvCalOver .monthYearCont .yearContainer .yearContainerinner #firstColYear1 li a").removeClass("liActive"), $(this).addClass("liActive"); var e = $(".multidatecont .yearContainerinner .liActive").text(), a = $(".multidatecont .monthContainer .liActive").text(); $(".multidatecont .monthContainer ul li a").removeClass("liActive"), $(".multidatecont .monthContainer ul li a").removeClass("liDisabled"), t(parseInt(c(a)), e) } }) }() }, 100), t.btnPasteAdvOk = function () { var e = $(".multidatecont .yearContainerinner .liActive").text(), a = $(".multidatecont .monthContainer .liActive").text(), r = new Date(e.substring(0, 4), parseInt(c(a)) - 1, t.currentDateValue.getDate()); o.notifyMultidatepickerSelect(r), GetRevenueYearMonthDetail(r) } }]).controller("importCalDesktopCtrl", ["$rootScope", "$filter", "$scope", "$modalInstance", "$state", "$rootScope", "$timeout", "$window", "uiGridConstants", "constantService", "importCalService", "arguments", "$modal", "$document", "$interval", "resizeWindowService", function (e, t, a, r, o, e, n, i, s, l, d, c, g, p, u, m) { a.refreshGridOutlook = !0, a.searchOptions = { sDate: !0, eDate: !0, hrs: !0, subject: !0 }, a.searchText = "", a.srchTxt = t("translate")("lbl_srchTxt"), a.recTitle = t("translate")("lbl_rec"); var C = !1; a.isMinimize = !0; var f = m.getMaxMinSettings(10, 23, 23, 800, 293); a.maxMode = f[1], a.maxMode.innerHeight = a.maxMode.height - a.maxMode.topHeader - 5, a.maxMode.gridHeight = a.maxMode.innerHeight - a.maxMode.section1Hgt - 10, a.maxMode.gridWidth = a.maxMode.width - 10, a.maxMode.gridViewPortHeight = a.maxMode.gridHeight - 24, a.minMode = f[0], a.minMode.innerHeight = a.minMode.height - a.minMode.topHeader - 5, a.minMode.gridHeight = a.minMode.innerHeight - a.minMode.section1Hgt - 10, a.minMode.gridWidth = a.minMode.width - 10, a.minMode.gridViewPortHeight = a.minMode.gridHeight - 24, a.windowConfig = angular.copy(a.minMode), localStorage.gridImportCalVwportHeight = a.windowConfig.gridViewPortHeight, e.isMinimize = !0, a.resizeWindow = function (t) { e.errorLogMethod("importCalDesktopCtrl.$scope.resizeWindow"), v(), void 0 !== a.gridApi && (a.sortInfo = a.gridApi.grid.getColumnSorting(), a.state = a.gridApi.saveState.save()), e.isMinimize = t, a.isMinimize = t, a.isMinimize ? (a.minMode.isRendered = !1, a.windowConfig = a.minMode, $("#importCalPopUp").draggable("enable")) : (a.maxMode.isRendered = !1, a.windowConfig = a.maxMode, $("#importCalPopUp").draggable({ disabled: !0 })), localStorage.gridImportCalVwportHeight = a.windowConfig.gridViewPortHeight, n(function () { a.windowConfig.isRendered = !0, a.windowConfig.isRefreshGrid = !0 }, 10) }; a.MeetingTitle = t("translate")("lbl_MeetingTitle"), a.AptTitle = t("translate")("lbl_AptTitle"); var h = t("translate")("lbl_item"), D = t("translate")("lbl_items"); a.getHeader = function (e) { var a = e.treeNode.aggregations[0].groupVal; return e.treeNode.aggregations[0].col.displayName == t("translate")("tab_Day") ? a = t("date")(a, "EEEE, MMMM dd, yyyy") : e.treeNode.aggregations[0].col.displayName != t("translate")("lbl_StartTime") && e.treeNode.aggregations[0].col.displayName != t("translate")("lbl_EndTime") || (a = t("date")(a, "hh:mm a")), e.treeNode.aggregations[0].col.displayName + ": " + a + " (" + e.treeNode.aggregations[0].value + (e.treeNode.aggregations[0].value > 1 ? " " + D + ")" : " " + h + ")") }; var S = [{ cellClass: "gridImportCalWindow", name: "View", enableColumnMenu: !1, enableSorting: !1, suppressRemoveSort: !0, displayName: "", width: 40, enableFiltering: !1, enableHiding: !1, groupingShowAggregationMenu: !1, enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div id="header" class="ui-grid-cell-contents ui-grid-cell" style="width:100%;height:100%"><div class="myTimeHeaderClass" ng-if="row.groupHeader">{{grid.appScope.getHeader(row)}}</div><div ng-if="!row.groupHeader" value={{row.entity}} class="icon-delete ui-grid-cell-contents" title="{{(row.entity.ISMTG | uppercase) == \'Y\'?grid.appScope.MeetingTitle:grid.appScope.AptTitle}}"><input ng-class="(row.entity.ISMTG | uppercase) == \'Y\'?\'entry-meeting\':\'entry-appointment\'" ng-click="grid.appScope.viewDetail(row.entity)" type="image" id="imgGridDeleteEdit" /></div></div>' }, { name: "STRTTIM_Hrs", sort: { direction: s.ASC, priority: 0 }, width: 105, groupingShowAggregationMenu: !1, headerCellClass: "startTimeHeader", suppressRemoveSort: !0, displayName: t("translate")("lbl_StartTime"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div ng-if="!row.groupHeader" class="ui-grid-cell" title="{{(row.entity.STRTTIM_Hrs)| date:\'EEE, MMM dd, yyyy hh:mm a\'}}">{{(row.entity.STRTTIM_Hrs | date:"hh:mm a")}}</div>', allowCellFocus: !0 }, { name: "ENDTIM_hrs", groupingShowAggregationMenu: !1, headerCellClass: "startTimeHeader", width: 95, suppressRemoveSort: !0, displayName: t("translate")("lbl_EndTime"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div ng-if="!row.groupHeader" class="ui-grid-cell" title="{{(row.entity.STRTTIM_Hrs)| date:\'EEE, MMM dd, yyyy hh:mm a\'}}">{{(row.entity.ENDTIM_hrs | date:"hh:mm a")}}</div>', allowCellFocus: !0 }, { name: "HRS", groupingShowAggregationMenu: !1, headerCellClass: "startTimeHeader", width: 65, suppressRemoveSort: !0, displayName: t("translate")("lbl_HrsFull"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div ng-if="!row.groupHeader" class="ui-grid-cell rightAlig" >{{row.entity.HRS}}</div>', allowCellFocus: !0 }, { name: "SUBJ", groupingShowAggregationMenu: !1, suppressRemoveSort: !0, displayName: t("translate")("lbl_Subject"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div ng-if="!row.groupHeader" class="ui-grid-cell" title="{{row.entity.SUBJ}}">{{row.entity.SUBJ}}</div>', allowCellFocus: !0 }], T = [{ cellClass: "gridImportCalWindow", name: "View", suppressRemoveSort: !0, enableSorting: !1, enableColumnMenu: !1, displayName: "", width: 40, enableFiltering: !1, enableHiding: !1, groupingShowAggregationMenu: !1, enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div id="header" class="ui-grid-cell-contents ui-grid-cell" style="width:100%;height:100%"><div class="myTimeHeaderClass" ng-if="row.groupHeader" >{{grid.appScope.getHeader(row)}}</div><div ng-if="!row.groupHeader" value={{row.entity}} class="icon-delete ui-grid-cell-contents" title="{{(row.entity.ISMTG | uppercase) == \'Y\'?grid.appScope.MeetingTitle:grid.appScope.AptTitle}}"><input ng-class="(row.entity.ISMTG | uppercase) == \'Y\'?\'entry-meeting\':\'entry-appointment\'" ng-click="grid.appScope.viewDetail(row.entity)" type="image" id="imgGridDeleteEdit" /></div></div>' }, { name: "Recurring", suppressRemoveSort: !0, enableSorting: !1, enableColumnMenu: !1, displayName: "", width: 25, enableFiltering: !1, enableHiding: !1, groupingShowAggregationMenu: !1, enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: "<div  title=\"{{grid.appScope.recTitle}}\" value={{row.entity}} ng-class=\"(row.entity.ISREC | uppercase) == 'Y' ?'icon-delete ui-grid-cell-contents entry-rec':'icon-delete ui-grid-cell-contents'\" ></div>" }, { name: "WeekCalDay", sort: { direction: s.ASC, priority: 0 }, field: "WEEKDAY", enableHiding: !1, enableAgg: !1, groupingShowAggregationMenu: !1, enableColumnResizing: !1, suppressRemoveSort: !0, displayName: t("translate")("tab_Day"), enableCellEdit: !1, visible: !1 }, { name: "STRTTIM_Hrs", enableGrouping: !1, sort: { direction: s.ASC, priority: 0 }, width: 105, groupingShowAggregationMenu: !1, headerCellClass: "startTimeHeader", suppressRemoveSort: !0, displayName: t("translate")("lbl_StartTime"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div ng-if="!row.groupHeader" class="ui-grid-cell" title="{{(row.entity.STRTTIM_Hrs)| date:\'EEE, MMM dd, yyyy hh:mm a\'}}">{{(row.entity.STRTTIM_Hrs | date:"hh:mm a")}}</div>', allowCellFocus: !0 }, { name: "ENDTIM_hrs", enableGrouping: !1, groupingShowAggregationMenu: !1, headerCellClass: "startTimeHeader", width: 95, suppressRemoveSort: !0, displayName: t("translate")("lbl_EndTime"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div ng-if="!row.groupHeader" class="ui-grid-cell" title="{{(row.entity.STRTTIM_Hrs)| date:\'EEE, MMM dd, yyyy hh:mm a\'}}">{{(row.entity.ENDTIM_hrs | date:"hh:mm a")}}</div>', allowCellFocus: !0 }, { name: "HRS", groupingShowAggregationMenu: !1, headerCellClass: "startTimeHeader", width: 65, suppressRemoveSort: !0, displayName: t("translate")("lbl_HrsFull"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div  ng-if="!row.groupHeader" class="ui-grid-cell rightAlig" >{{row.entity.HRS}}</div>', allowCellFocus: !0 }, { name: "SUBJ", groupingShowAggregationMenu: !1, suppressRemoveSort: !0, displayName: t("translate")("lbl_Subject"), enableCellEdit: !1, enableColumnResizing: !1, cellTemplate: '<div ng-if="!row.groupHeader" class="ui-grid-cell" title="{{row.entity.SUBJ}}">{{row.entity.SUBJ}}</div>', allowCellFocus: !0 }]; a.multipleRowsSelected = !1, a.srchOptChange = function () { e.errorLogMethod("multidatepickerCtrlDesktop.$scope.srchOptChange"), C = !0 }, a.clearSearch = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.clearSearch"), a.searchText = "", a.refreshData() }, a.refreshData = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.refreshData"), a.gridApi.selection.clearSelectedRows(); var r = []; a.gridDataSearch = [], 1 == a.isAllDayFlag ? r = a.importCalObjAll.items : 0 == a.isAllDayFlag && (r = a.importCalObj.items), 1 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 1 == a.searchOptions.eDate && ("" == a.searchText.trim() ? a.gridDataSearch = r : a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return e.HRS.toString().indexOf(a.searchText) > -1 || void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 || e.STRTTIM_ampm.indexOf(a.searchText) > -1 || e.ENDTIM_ampm.indexOf(a.searchText) > -1 })), 0 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 0 == a.searchOptions.eDate && ("" == a.searchText.trim() ? a.gridDataSearch = r : a.gridDataSearch = []), 1 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 0 == a.searchOptions.eDate ? a.gridDataSearch = t("filter")(r, { HRS: a.searchText }, void 0) : 1 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 0 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return e.HRS.toString().indexOf(a.searchText) > -1 || void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 }) : 1 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 0 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { return e.HRS.toString().indexOf(a.searchText) > -1 || e.STRTTIM_ampm.indexOf(a.searchText) > -1 }) : 1 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 1 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { return e.HRS.toString().indexOf(a.searchText) > -1 || e.ENDTIM_ampm.indexOf(a.searchText) > -1 }) : 1 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 0 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return e.HRS.toString().indexOf(a.searchText) > -1 || void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 || e.STRTTIM_ampm.indexOf(a.searchText) > -1 }) : 1 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 1 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return e.HRS.toString().indexOf(a.searchText) > -1 || void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 || e.ENDTIM_ampm.indexOf(a.searchText) > -1 }) : 1 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 1 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { return e.HRS.toString().indexOf(a.searchText) > -1 || e.STRTTIM_ampm.indexOf(a.searchText) > -1 || e.ENDTIM_ampm.indexOf(a.searchText) > -1 }) : 0 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 0 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 }) : 0 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 0 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 || e.STRTTIM_ampm.indexOf(a.searchText) > -1 }) : 0 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 1 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 || e.ENDTIM_ampm.indexOf(a.searchText) > -1 }) : 0 == a.searchOptions.hrs && 1 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 1 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { if (null !== e.SUBJ) return void 0 !== e.SUBJ && e.SUBJ.toLowerCase().indexOf(a.searchText.toLowerCase()) > -1 || e.STRTTIM_ampm.indexOf(a.searchText) > -1 || e.ENDTIM_ampm.indexOf(a.searchText) > -1 }) : 0 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 0 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { return e.STRTTIM_ampm.toString().indexOf(a.searchText) > -1 }) : 0 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 1 == a.searchOptions.sDate && 1 == a.searchOptions.eDate ? a.gridDataSearch = r.filter(function (e) { return e.STRTTIM_ampm.toString().indexOf(a.searchText) > -1 || e.ENDTIM_ampm.indexOf(a.searchText) > -1 }) : 0 == a.searchOptions.hrs && 0 == a.searchOptions.subject && 0 == a.searchOptions.sDate && 1 == a.searchOptions.eDate && (a.gridDataSearch = r.filter(function (e) { return e.ENDTIM_ampm.toString().indexOf(a.searchText) > -1 })), a.gridOptions.data = a.gridDataSearch, u(function () { a.gridApi.selection.selectRow(a.gridOptions.data[0]) }, 0, 1), 0 == a.gridOptions.data.length ? a.CalNoEntryMessage = 1 : a.CalNoEntryMessage = 0, localStorage.GroupingCalled = "1" }, a.toggleSrchSelection = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.toggleSrchSelection"), a.showFilterMenu = !1, a.showSrchSelection = !a.showSrchSelection, C = a.showSrchSelection }, p.on("click", function (t) { (a.showFilterMenu || a.showMenuOutsideGrid || a.showSrchSelection || e.showImpCalRightMenuFlag) && (C || a.$apply(function () { a.showFilterMenu = !1, a.showMenuOutsideGrid = !1, -1 == $(t.target).attr("class").indexOf("noHideMenu") && (e.showImpCalRightMenuFlag = !1), a.showSrchSelection = !1 })), C = !1 }), a.gridOptions = { rowHeight: 19, showHeader: !0, enableVerticalScrollbar: s.ALWAYS, enableHorizontalScrollbar: 0, showGridFooter: !0, showColumnFooter: !1, enableGridMenu: !0, enableCellSelection: !0, enableCellEditOnFocus: !0, enableFiltering: !1, enableRowSelection: !0, treeRowHeaderAlwaysVisible: !1, enableRowHeaderSelection: !1, multiSelect: !0, modifierKeysToMultiSelect: !0, noUnselect: !0, gridFooterTemplate: "<div></div>", columnDefs: S, rowTemplate: '<div ng-dblclick="grid.appScope.viewEntry(row.entity)" ng-mouseup="grid.appScope.getSelectedRowCount(row,grid,$event)" ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell" ng-class="{ \'ui-grid-row-header-cell\': col.isRowHeader }" ui-grid-cell></div>', onRegisterApi: function (e) { a.maskTest = String("?*?*?*-?9?9?9?-?9?9?9"), a.gridApi = e, e.core.on.rowsRendered(a, function () { a.windowConfig.isRefreshGrid && (localStorage.GroupingCalled, a.windowConfig.isRestored = !0, a.gridApi.saveState.restore(a, a.state), a.windowConfig.isRefreshGrid = !1, n(function () { a.gridApi.treeBase.expandAllRows() })), a.gridApi.grid.treeBase.tree instanceof Array && ("1" == localStorage.GroupingCalled && (localStorage.GroupingCalled = "0", a.gridApi.treeBase.expandAllRows()), "1" == localStorage.isWeekAutoGrouping && (localStorage.isWeekAutoGrouping = "0", a.gridApi.grouping.groupColumn("WeekCalDay"), localStorage.GroupingCalled = "1")) }), e.selection.on.rowSelectionChanged(a, function (t) { var r = e.selection.getSelectedRows(); 0 == r.length ? a.gridApi.selection.selectRow(a.gridOptions.data[a.gridOptions.data.indexOf(t.entity)]) : r.length > 1 ? a.multipleRowsSelected = !0 : 1 == r.length && (a.multipleRowsSelected = !1) }), a.gridApi.core.on.sortChanged(a, function (e, t) { if (a.windowConfig.isRestored) a.windowConfig.isRestored = !1; else { if (0 == t.length) { var r = e.getColumn(localStorage.ungroupColumnName); r && e.sortColumn(r, "desc" == localStorage.ungroupColSortDir ? s.DESC : s.ASC, !1) } if (1 == t.length && (t[0].footerCellClass = ""), t.length > 1 && "1" != localStorage.UnsortApplied) { for (var o = null, n = null, i = 0; i < t.length; i++) void 0 != t[i].grouping && 0 == t[i].grouping.groupPriority && (t[i].footerCellClass = "removeSortClass", t[i].sort.priority = 0, "1" == localStorage.GroupingCalled && void 0 != t[i - 1] && null != t[i - 1] ? (t[i - 1].sort.priority = 1, n = i - 1) : (t[t.length - 1].sort.priority = 1, n = t.length - 1), o = i); if (null != o) for (i = 0; i < t.length; i++) i != o && i != n && (localStorage.UnsortApplied = "1", t[i].unsort()); else t[1].sort.priority = 0, localStorage.UnsortApplied = "1", t[0].unsort() } else localStorage.UnsortApplied = "0" } }) } }; var w = function (e) { if (void 0 != e) { var t = e.split("-"), a = t[2].split(" "); return new Date(t[0], t[1] - 1, a[0]) } return null }, O = function (e) { if (void 0 != e && null != e) { var t = (e = e.trim()).split("-"), a = t[2].split(" "), r = a[1].split(":"); return new Date(t[0], t[1] - 1, a[0], r[0], r[1], r[2]) } return new Date }, M = function () { this.items = [], this.busy = !0, this.loadMsg = "Search Results . . ." }; a.getSelectedRowCount = function (e, t, r) { if (r.shiftKey) { for (var o = a.gridApi.core.getVisibleRows(), n = [], i = 0; i < o.length; i++) 1 == o[i].groupHeader ? n.push(null) : n.push(o[i].entity); var s = t.api.selection.getSelectedRows(), l = n.indexOf(s[0]), d = n.indexOf(e.entity); l > d && (l = n.indexOf(s[s.length - 1])), t.api.selection.clearSelectedRows(); var c = 0; if (l < d) for (g = l; g <= d; g++) a.gridApi.selection.selectRowByVisibleIndex(g), c++; else for (var g = l; g >= d; g--) a.gridApi.selection.selectRowByVisibleIndex(g), c++; t.api.selection.getSelectedRows(); a.multipleRowsSelected = c > 1 } }, a.importCalObj = new M, a.importCalObjAll = new M, a.importCalObjMeetings = new M, a.importCalObjAllMeetings = new M, a.currentDate = "", a.CalNoEntryMessage = 0, a.refreshUIGridOutlook = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.refreshUIGridOutlook"), a.refreshGridOutlook = !1, a.windowConfig.isRendered = !1, n(function () { a.windowConfig.isRendered = !0, u(function () { try { a.gridApi.selection.selectRow(a.gridOptions.data[0]) } catch (e) { } }, 0, 1) }, 0) }, a.init = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.init"), a.filterTitle = t("translate")("lbl_fltrOptns"), a.filterTitle2 = t("translate")("lbl_fltrOptnsSCal"), a.ViewDetailTitle = t("translate")("lbl_viewDtls"), a.ViewDetailTitle2 = t("translate")("lbl_viewDtlsSlctd"), a.refreshTitle = t("translate")("lbl_rfrshEntry"), a.refreshTitle2 = t("translate")("lbl_rfrshEntryRtrv"), a.selectTitle = t("translate")("lbl_slctEntry"), a.selectTitle2 = t("translate")("lbl_slctEntryImprt"), n(function () { $("#importCalPopUp, #innerCalDiv").draggable({ start: function (e, t) { if ("innerCalDiv" == e.target.id) return !1 } }) }, 0), e.iscalOpen = !0, a.importCalObj.items = [], a.importCalObjAll.items = [], a.importCalObjMeetings.items = [], a.importCalObjAllMeetings.items = [], a.itemsDataTotal = c.weekData, a.ttlHrCal = c.totalHrs, localStorage.isWeekAutoGrouping = c.isDailyMode ? "0" : "1", a.checkVisibilityFlag = !0; var r = c.isDailyMode ? c.currentDate : c.weekStartDate; r.setHours(0, 0, 0, 0); var o = w(c.revEndDate.substring(0, 10)), i = w(c.revStartDate.substring(0, 10)); o.setHours(0, 0, 0, 0), i.setHours(0, 0, 0, 0); var s = new Date(r.valueOf()), g = new Date(s.valueOf()); if (c.isDailyMode) g = g.setDate(g.getDate()); else { g.setDate(g.getDate() + 7); for (var p = 0; p < 7 && 6 != g.getDay() ; p++) g.setDate(g.getDate() - 1); a.weeklyStartDate = c.weekStartDate } var m = g, C = r; g > o && !c.isDailyMode && (g = new Date(o.valueOf())), r < i && (r = new Date(i.valueOf()), s = new Date(r.valueOf()), a.weeklyStartDate = s.valueOf(), g = m), c.isDailyMode || (c.currentDate.setHours(0, 0, 0, 0) > o && c.weekStartDate.setHours(0, 0, 0, 0) < o && ((r = new Date(o.valueOf())).setDate(r.getDate() + 1), s = new Date(r.valueOf()), g = m), c.currentDate.setHours(0, 0, 0, 0) < o && c.weekStartDate.setHours(0, 0, 0, 0) < o && g > o && (r = new Date(c.weekStartDate.valueOf()), s = new Date(r.valueOf()), g = new Date(o.valueOf())), c.currentDate.setHours(0, 0, 0, 0) > o && c.weekStartDate.setHours(0, 0, 0, 0) >= o && (r = C, s = new Date(r.valueOf()), g = m)), a.isDailyMode = c.isDailyMode, a.noCalEntriesDay = t("translate")("msg_noCalEntryDay"), a.noCalEntriesWeek = t("translate")("msg_noCalEntryWeek"), a.noCalEntriesMsg = a.isDailyMode ? a.noCalEntriesDay : a.noCalEntriesWeek, g = new Date(g), s.setHours(0, 0, 0, 0), currentTimezone = s.getTimezoneOffset(), s.setMinutes(s.getMinutes() + currentTimezone), g.setHours(24, 0, 0, 0), currentTimezone = g.getTimezoneOffset(), g.setMinutes(g.getMinutes() + currentTimezone); var f = t("date")(s, "yyyy-MM-dd HH:mm:ss"); g = t("date")(g, "yyyy-MM-dd HH:mm:ss"), a.currentDate = c.currentDate; var h = e.GetLoginDetail(!1, !0), D = e.GetInitialDetail(!1, !0); a.CalImportData = []; var O = l.DOMAINNAME; "Y" == c.flag ? (null != localStorage.getItem("calENCKEY") && void 0 != localStorage.getItem("calENCKEY") || localStorage.setItem("calENCKEY", c.encKey), null != localStorage.getItem("nonADDomain") && void 0 != localStorage.getItem("nonADDomain") || localStorage.setItem("nonADDomain", c.domain), O = localStorage.getItem("nonADDomain")) : localStorage.setItem("calENCKEY", h.ENCKEY), d.getCalImportEntries(h.SESKEY, localStorage.getItem("calENCKEY"), O, f, g, D.EMPL_REC.EMAIL, D.EMPL_REC.EMAIL).then(function (e) { if (0 == parseInt(e.RETCALENT_OUT_OBJ.RETCD)) { if (void 0 == e.RETCALENT_OUT_OBJ.CALI_ARR || 0 == e.RETCALENT_OUT_OBJ.CALI_ARR.length) return a.CalNoEntryMessage = 1, a.importCalObj.busy = !0, void (a.importCalObj.loadMsg = t("translate")("msg_NoMoreData")); if ("[object Array]" != Object.prototype.toString.call(e.RETCALENT_OUT_OBJ.CALI_ARR)) { var r = e.RETCALENT_OUT_OBJ.CALI_ARR; e.RETCALENT_OUT_OBJ.CALI_ARR = [], e.RETCALENT_OUT_OBJ.CALI_ARR.push(r.CALI_OBJ) } var o = e.RETCALENT_OUT_OBJ.CALI_ARR, i = a.importCalObj.items.length; if (o.length > 0) for (s = 0; s < o.length; s++) 0 != o[s].CALID && (null != o[s].SUBJ && void 0 != o[s].SUBJ && (o[s].SUBJ = o[s].SUBJ.replace(/\n/g, " "), o[s].SUBJ = o[s].SUBJ.replace(/\t/g, " ")), o[s].index = i, "N" == o[s].ISALDYEV && a.importCalObj.items.push(o[s]), "Y" == o[s].ISMTG && "N" == o[s].ISALDYEV && a.importCalObjMeetings.items.push(o[s]), "Y" == o[s].ISMTG && a.importCalObjAllMeetings.items.push(o[s]), a.importCalObjAll.items.push(o[s]), i++); else "object" == typeof e.RETCALENT_OUT_OBJ.CALI_ARR && 0 != e.RETCALENT_OUT_OBJ.CALI_ARR.CALI_OBJ.CALID && (e.RETCALENT_OUT_OBJ.CALI_ARR.CALI_OBJ.index = i, a.importCalObj.items.push(e.RETCALENT_OUT_OBJ.CALI_ARR.CALI_OBJ)) } else e.RETCALENT_OUT_OBJ.ERRMSG.trim(); a.CalNoEntryMessage = 2, a.message = e.RETCALENT_OUT_OBJ.ERRMSG, a.gridOptions.data = a.importCalObj.items, n(function () { var e = $("#importCalPopUp .ui-grid-render-container-body .ui-grid-viewport").height(); $("#importCalPopUp .ui-grid-pinned-container .ui-grid-viewport").height(e) }, 1e3), 0 == a.gridOptions.data.length ? a.CalNoEntryMessage = 1 : a.CalNoEntryMessage = 0; for (var s = 0; s < a.gridOptions.data.length; s++) { a.gridOptions.data[s].WEEKDAY = a.formatWeekDay(a.gridOptions.data[s].STRTTIM), a.gridOptions.data[s].HRS = a.timediff(a.gridOptions.data[s].STRTTIM, a.gridOptions.data[s].ENDTIM), a.gridOptions.data[s].STRTTIM_Hrs = a.formatDates(a.gridOptions.data[s].STRTTIM), a.gridOptions.data[s].ENDTIM_hrs = a.formatDates(a.gridOptions.data[s].ENDTIM); var l = t("date")(a.gridOptions.data[s].STRTTIM_Hrs, "hh:mm a"), d = t("date")(a.gridOptions.data[s].ENDTIM_hrs, "hh:mm a"); a.gridOptions.data[s].STRTTIM_ampm = l, a.gridOptions.data[s].ENDTIM_ampm = d } "true" == localStorage.isDailyMode ? a.gridOptions.columnDefs = S : a.gridOptions.columnDefs = T, a.refreshUIGridOutlook(), u(function () { a.gridApi.selection.selectRow(a.gridOptions.data[0]) }, 0, 1) }) }, a.isAllDayFlag = !1, a.isMeetingOnlyFlag = !1, a.showFilterMenu = !1; var v = function () { e.showImpCalRightMenuFlag = !1, a.showMenuOutsideGrid = !1 }; a.filterCal = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.filterCal"), v(), a.showSrchSelection = !1, a.showFilterMenu = !a.showFilterMenu, C = a.showFilterMenu }, a.allDayEventFilter = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.allDayEventFilter"), a.gridApi.selection.clearSelectedRows(), 1 != a.isAllDayFlag || a.isMeetingOnlyFlag ? 1 == a.isAllDayFlag && a.isMeetingOnlyFlag ? a.gridOptions.data = a.importCalObjAllMeetings.items : 0 != a.isAllDayFlag || a.isMeetingOnlyFlag ? 0 == a.isAllDayFlag && a.isMeetingOnlyFlag && (a.gridOptions.data = a.importCalObjMeetings.items) : a.gridOptions.data = a.importCalObj.items : a.gridOptions.data = a.importCalObjAll.items, 0 == a.gridOptions.data.length ? a.CalNoEntryMessage = 1 : a.CalNoEntryMessage = 0; for (var r = 0; r < a.gridOptions.data.length; r++) { a.gridOptions.data[r].WEEKDAY = a.formatWeekDay(a.gridOptions.data[r].STRTTIM), a.gridOptions.data[r].HRS = a.timediff(a.gridOptions.data[r].STRTTIM, a.gridOptions.data[r].ENDTIM), a.gridOptions.data[r].STRTTIM_Hrs = a.formatDates(a.gridOptions.data[r].STRTTIM), a.gridOptions.data[r].ENDTIM_hrs = a.formatDates(a.gridOptions.data[r].ENDTIM); var o = t("date")(a.gridOptions.data[r].STRTTIM_Hrs, "hh:mm a"), n = t("date")(a.gridOptions.data[r].ENDTIM_hrs, "hh:mm a"); a.gridOptions.data[r].STRTTIM_ampm = o, a.gridOptions.data[r].ENDTIM_ampm = n } u(function () { a.gridApi.selection.selectRow(a.gridOptions.data[0]) }, 0, 1), localStorage.GroupingCalled = "1" }, a.meetingFilter = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.meetingFilter"), a.gridApi.selection.clearSelectedRows(), 1 == a.isMeetingOnlyFlag && 0 == a.isAllDayFlag ? a.gridOptions.data = a.importCalObjMeetings.items : 1 == a.isMeetingOnlyFlag && 1 == a.isAllDayFlag ? a.gridOptions.data = a.importCalObjAllMeetings.items : 0 == a.isMeetingOnlyFlag && 1 == a.isAllDayFlag ? a.gridOptions.data = a.importCalObjAll.items : 0 == a.isMeetingOnlyFlag && 0 == a.isAllDayFlag && (a.gridOptions.data = a.importCalObj.items), 0 == a.gridOptions.data.length ? a.CalNoEntryMessage = 1 : a.CalNoEntryMessage = 0; for (var r = 0; r < a.gridOptions.data.length; r++) { a.gridOptions.data[r].WEEKDAY = a.formatWeekDay(a.gridOptions.data[r].STRTTIM), a.gridOptions.data[r].HRS = a.timediff(a.gridOptions.data[r].STRTTIM, a.gridOptions.data[r].ENDTIM), a.gridOptions.data[r].STRTTIM_Hrs = a.formatDates(a.gridOptions.data[r].STRTTIM), a.gridOptions.data[r].ENDTIM_hrs = a.formatDates(a.gridOptions.data[r].ENDTIM); var o = t("date")(a.gridOptions.data[r].STRTTIM_Hrs, "hh:mm a"), n = t("date")(a.gridOptions.data[r].ENDTIM_hrs, "hh:mm a"); a.gridOptions.data[r].STRTTIM_ampm = o, a.gridOptions.data[r].ENDTIM_ampm = n } u(function () { a.gridApi.selection.selectRow(a.gridOptions.data[0]) }, 0, 1), localStorage.GroupingCalled = "1" }; var E = function (r, o, n, i) { e.errorLogMethod("importCalDesktopCtrl.var.loadNewEnteryWindow"); var s = [0, 0, 0, 0, 0, 0, 0], l = [0, 0, 0, 0, 0, 0, 0]; o ? s[0] = parseFloat(a.ttlHrCal) : (e.weekStateCurrentDate = t("date")(n, "yyyy-MM-dd"), s[0] = parseFloat(void 0 == a.itemsDataTotal.HrsTotalSum1 ? 0 : a.itemsDataTotal.HrsTotalSum1), s[1] = parseFloat(void 0 == a.itemsDataTotal.HrsTotalSum2 ? 0 : a.itemsDataTotal.HrsTotalSum2), s[2] = parseFloat(void 0 == a.itemsDataTotal.HrsTotalSum3 ? 0 : a.itemsDataTotal.HrsTotalSum3), s[3] = parseFloat(void 0 == a.itemsDataTotal.HrsTotalSum4 ? 0 : a.itemsDataTotal.HrsTotalSum4), s[4] = parseFloat(void 0 == a.itemsDataTotal.HrsTotalSum5 ? 0 : a.itemsDataTotal.HrsTotalSum5), s[5] = parseFloat(void 0 == a.itemsDataTotal.HrsTotalSum6 ? 0 : a.itemsDataTotal.HrsTotalSum6), s[6] = parseFloat(void 0 == a.itemsDataTotal.HrsTotalSum7 ? 0 : a.itemsDataTotal.HrsTotalSum7)); var d = { startDate: r, isDailyMode: o, currentDate: n, editTEObj: i, isClosedRevMonth: !a.checkRevMonthFlag, hoursTotalDetail: { editEntryHrs: l, weeklyHrsSumDayWise: s } }; a.openModalCtrl = "newEntry", a.open("Desktop/NewEntry/templates/NewEntry.html", "NewEntryCtrl", d) }; a.open = function (t, r, o) { e.errorLogMethod("importCalDesktopCtrl.$scope.open"), g.open({ animation: a.animationsEnabled, templateUrl: t, controller: r, resolve: { arguments: function () { return o } } }).result.then(function (e) { switch (a.openModalCtrl) { case "pasteAdvanced": a.pasteMultiple(e) } }, function () { $(".overlay").css("display", "none"), $(".bottom-footer ul li a").removeClass("btn-grd2"), a.openModalCtrl = "" }) }, a.timediff = function (e, t) { var a = O(e), r = a.getTimezoneOffset(); a.setMinutes(a.getMinutes() - r); var o = O(t), r = o.getTimezoneOffset(); return o.setMinutes(o.getMinutes() - r), ((o.getTime() - a.getTime()) / 1e3 / 60 / 60).toFixed(2) }, a.formatDates = function (e) { var t = O(e), a = t.getTimezoneOffset(); return t.setMinutes(t.getMinutes() - a), t }, a.formatWeekDay = function (e) { var t = O(e), a = t.getTimezoneOffset(); return t.setMinutes(t.getMinutes() - a), t.setHours(0, 0, 0, 0), t }, a.viewDetails = function () { if (e.errorLogMethod("importCalDesktopCtrl.$scope.viewDetails"), !a.multipleRowsSelected) { v(); var t = a.gridApi.selection.getSelectedRows(); a.viewDetail(t[0]) } }, a.viewDetail = function (t) { e.errorLogMethod("importCalDesktopCtrl.$scope.viewDetail"); var r = l.DOMAINNAME; a.gridApi.selection.clearSelectedRows(), a.gridApi.selection.selectRow(a.gridOptions.data[a.gridOptions.data.indexOf(t)]); var o = e.GetLoginDetail(!1, !0), n = e.GetInitialDetail(!1, !0); d.getCalImportEntryDetail(o.SESKEY, localStorage.getItem("calENCKEY"), r, n.EMPL_REC.EMAIL, t.CALID).then(function (e) { 0 == parseInt(e.RETCALDET_OUT_OBJ.RETCD) && y(e.RETCALDET_OUT_OBJ.CALI_REC) }) }; var y = function (t) { e.errorLogMethod("importCalDesktopCtrl.var.loadCalDetailWindow"); var r = { sender_from: t.CALI_FROM, sender_to: t.CALI_TO, subject: t.SUBJ, location: t.LOC, mail_body: t.BDY, start_time: t.STRTTIM, end_time: t.ENDTIM, meetingFlag: t.ISMTG }; a.openModalCtrl = "calDetail", a.open("Desktop/CalendarImport/templates/OutlookTeamMeeting.html", "importCalDesktopDetailCtrl", r) }; a.refreshCal = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.refreshCal"), v(), a.init() }, a.$on("selectFromDetails", function (t, r) { e.errorLogMethod("importCalDesktopCtrl.$scope.$on.selectFromDetails"), a.selectCal() }), a.viewEntry = function (r) { if (e.errorLogMethod("importCalDesktopCtrl.$scope.viewEntry"), void 0 !== r.CALID) { e.importViewed = !0, e.lastCurrentDate = t("date")(c.currentDate, "yyyy-MM-dd"), e.lastExpandAllText = c.lastExpandAllText, e.lastExpandClass = c.lastExpandClass, e.cntrExpandCollapse = 2, c.isDailyMode || (e.isPasteClicked = !0, e.weekStateCurrentDate = t("date")(c.currentDate, "yyyy-MM-dd")); var o = [null, null, null, null, null, null, null]; a.week = [null, null, null, null, null, null, null]; var n, i = r.STRTTIM, s = O(i), l = s.getTimezoneOffset(); s.setMinutes(s.getMinutes() - l); var d = s.getDay(); a.ttlHrs = 0; var g = r.HRS; if (a.isDailyMode) a.ttlHrs += parseFloat(r.HRS); else { o[d] = Number(parseFloat(g).toFixed(2)); for (var p = 0; p < 7; p++) a.week[p] = o[p], r.weeklyHour = a.week } a.ttlHrs = a.ttlHrs.toFixed(2), n = a.currentDate, e.isRefresh = !1, r.isImportCal = !0, r.CTDESC = "", r.DES = r.SUBJ, E(c.isDailyMode ? c.currentDate : c.weekStartDate, c.isDailyMode, n, r) } }, a.selectCal = function () { if (e.errorLogMethod("importCalDesktopCtrl.$scope.selectCal"), !a.multipleRowsSelected) { v(); var t = a.gridApi.selection.getSelectedRows(); a.viewEntry(t[0]) } }; var I = 0; a.checkVisibility = function (r, o) { e.errorLogMethod("importCalDesktopCtrl.$scope.checkVisibility"), 0 == o && (I = 0); var n = O(r), i = n.getTimezoneOffset(); n.setMinutes(n.getMinutes() - i); var s = n.getDate(); if (s == I) return a.checkVisibilityFlag = !1, ""; I = s, a.checkVisibilityFlag = !0; var l = t("date")(n, "yyyy-MM-dd HH:mm:ss"); return l = O(l) }; var _ = function (e, t) { return $(".importCaledarPopup").width() - t < e && (t -= e - 0), t }, R = function (e) { var t = $("#importCalPopUp").height() - e; return t < 40 ? e - (40 - t) : e }; a.rightClick = function (t) { e.errorLogMethod("importCalDesktopCtrl.$scope.rightClick"), a.rightClickObj = t.target, a.showEditFlag = !1, e.showImpCalRightMenuFlag = !1, a.showMenuOutsideGrid = !0; var r = $(".entrypopup.importCaledarPopup").offset(), o = t.pageX - r.left, n = t.pageY - r.top, i = _(218, o), s = R(n); $(".edit_MenuCalOutsideGrid").css({ left: i + "px", top: s + "px" }), $(".edit_MenuCalOutsideGrid").css("display", "block"), t.preventDefault(), t.stopPropagation() }, a.getStartTime = function (a) { e.errorLogMethod("importCalDesktopCtrl.$scope.getStartTime"); var r = O(a), o = r.getTimezoneOffset(); return r.setMinutes(r.getMinutes() - o), (r = t("date")(r, "yyyy-MM-dd")).substring(0, 10) }, a.cancel = function () { e.errorLogMethod("importCalDesktopCtrl.$scope.cancel"), e.iscalOpen = !1, r.dismiss("cancel") } }]).controller("importCalDesktopDetailCtrl", ["$rootScope", "$filter", "$scope", "$modalInstance", "$state", "$rootScope", "$timeout", "$window", "constantService", "importCalService", "arguments", "$modal", "$document", "$filter", function (e, t, a, r, o, e, n, i, s, l, d, c, g, t) { a.init = function () { e.errorLogMethod("importCalDesktopDetailCtrl.$scope.init"), n(function () { $("#viewDetailPopUp, #innerDetailDiv").draggable({ cancel: "#innerDetailDiv" }) }, 0), a.sender_from = d.sender_from, a.sender_to = d.sender_to, a.subject = null == d.subject ? "" : d.subject, a.subjectTitle = null == d.subject ? "&nbsp;" : d.subject, a.location = d.location, a.meetingFlag = d.meetingFlag; var r = p(d.start_time), o = r.getTimezoneOffset(); r.setMinutes(r.getMinutes() - o); var i = t("date")(r, "EEE, MMM d, y h:mm a"); a.start_time = i; var s = p(d.end_time), o = s.getTimezoneOffset(); s.setMinutes(s.getMinutes() - o); var l = t("date")(s, "EEE, MMM d, y h:mm a"); a.end_time = l; var c = $("<div>").html(d.mail_body).text(); c.indexOf("<body>") > -1 && (c = c.substring(c.indexOf("<body>") + 6, c.indexOf("</body>"))), $(".showEmailContent").append(c) }; var p = function (e) { if (void 0 != e && null != e) { var t = (e = e.trim()).split("-"), a = t[2].split(" "), r = a[1].split(":"); return new Date(t[0], t[1] - 1, a[0], r[0], r[1], r[2]) } return new Date }; a.formatDates = function (e) { var t = p(e), a = t.getTimezoneOffset(); t.setMinutes(t.getMinutes() - a); var r = t.getHours(), o = t.getMinutes(), n = r >= 12 ? "pm" : "am"; return (r = (r %= 12) || 12) + ":" + (o = o < 10 ? "0" + o : o) + " " + n }, a.selectMeeting = function () { e.errorLogMethod("importCalDesktopDetailCtrl.$scope.selectMeeting"), r.dismiss("cancel"), e.$broadcast("selectFromDetails", {}) }, a.cancel = function () { e.errorLogMethod("importCalDesktopDetailCtrl.$scope.cancel"), r.dismiss("cancel") } }]).controller("importCalDesktopLoginCtrl", ["$rootScope", "$filter", "$scope", "$modal", "loginService", "constantService", "arguments", "openPopUpWindowFactory", "$timeout", function (e, t, a, r, o, n, i, s, l) { a.username = "", a.domain = "mercer", a.password = "", a.loginNote = t("translate")("msg_NtwrkIdPswrd"), a.popUpName = "importCalDesktopLoginCtrl", a.enableLoginFlag = !0, a.animationsEnabled = !0, a.timedDisplay = "", $("#txtCalLoginUserName").on("contextmenu", function (e) { e.preventDefault() }), $("#txtCalLoginPassword").on("contextmenu", function (e) { e.preventDefault() }); var d = function (e) { if (void 0 != e) { var t = e.split("-"), a = t[2].split(" "); return new Date(t[0], t[1] - 1, a[0]) } return null }; a.open = function (t, o, n) { e.errorLogMethod("importCalDesktopLoginCtrl.scope.open"); r.open({ animation: a.animationsEnabled, templateUrl: t, controller: o, resolve: { selectedData: function () { return n } } }) }, a.showUntilSeconds = function () { e.errorLogMethod("importCalDesktopLoginCtrl.scope.showUntilSeconds"); var t = "", r = ""; t = 0 == a.username.length ? "UN " : "", r = 0 == a.password.length ? "PW " : "", a.timedDisplay = t + r, null != a.timerLogin && l.cancel(a.timerLogin), a.timerLogin = l(function () { a.timedDisplay = "" }, 1e3 * parseInt(n.DESKTOPDISPLAYSECONDS)) }, a.fieldEmpty = t("translate")("msg_noUsrNm"), a.IsValue = function () { e.errorLogMethod("importCalDesktopLoginCtrl.scope.IsValue"), "" != a.username && "" != a.password ? (a.enableLoginFlag = !1, a.fieldEmpty = "", $("#loginbtnDsktp").removeAttr("disabled")) : "" == a.username & "" != a.password && "" != a.domain ? (a.fieldEmpty = t("translate")("msg_noUsrNm"), a.enableLoginFlag = !0) : "" != a.username & "" == a.password ? (a.fieldEmpty = t("translate")("msg_noPswrd"), a.enableLoginFlag = !0) : "" == a.username & "" == a.password ? (a.fieldEmpty = t("translate")("msg_noUsrNm"), a.enableLoginFlag = !0) : (a.enableLoginFlag = !0, $("#loginbtnDsktp").attr("disabled", !0)) }, a.resetField = function (t) { e.errorLogMethod("importCalDesktopLoginCtrl.scope.resetField"), "dom" == t ? a.domain = "" : a.username = "", a.IsValue() }, a.checkDisable = function () { return e.errorLogMethod("importCalDesktopLoginCtrl.scope.checkDisable"), a.enableLoginFlag }, a.cancel = function () { e.errorLogMethod("importCalDesktopLoginCtrl.scope.cancel"), a.$close() }, a.login = function () { e.errorLogMethod("importCalDesktopLoginCtrl.scope.login"), e.isLineClicked = !0; var r = e.GetLoginDetail(!1, !0), l = (i.currentDate, i.isDailyMode, i.weeklyStartDate, escape(a.username)), c = e.GetLoginDetail(!1, !0), g = new Date(i.currentDate.valueOf()); g = t("date")(g, "yyyy-MM-dd"); var p = JSON.parse(localStorage.getItem("Revenue_Months_ImportCal")), u = null; if (null != p) { var m = new Date(g); m = new Date(m.getTime() + 60 * m.getTimezoneOffset() * 1e3), u = angular.fromJson(p).filter(function (e) { if (null != e && m >= d(e.STRTDTE) && m <= d(e.ENDDTE)) return !0 }) } null != u && void 0 != u && 0 != u.length && (a.revStartDate = u[0].STRTDTE, a.revEndDate = u[0].ENDDTE), o.nonADlogin(c.SESKEY, l, a.password, a.domain, function (o) { if (0 == parseInt(o.GETENCRYPT_OUT_OBJ.RETCD)) if (o.GETENCRYPT_OUT_OBJ.CCMAIL == e.GetInitialDetail(!1, !0).EMPL_REC.EMAIL) { localStorage.setItem("nonADLogin", "Y"), localStorage.setItem("encKeyNew", o.GETENCRYPT_OUT_OBJ.ENCKEY), a.$close(); var l = { currentDate: i.currentDate, isDailyMode: i.isDailyMode, weekCurrentDate: i.weekCurrentDate, weekStartDate: i.weekStartDate, flag: "Y" == r.ISNONAD ? "Y" : "N", encKey: o.GETENCRYPT_OUT_OBJ.ENCKEY, revStartDate: a.revStartDate, revEndDate: a.revEndDate, lastExpandAllText: i.lastExpandAllText, lastExpandClass: i.lastExpandClass, domain: a.domain, weekData: i.weekData }; a.openModalCtrl = "importCalDesktopCtrl", s.openModalPopUp("Desktop/CalendarImport/templates/ImportCalDesktopEntries.html", "importCalDesktopCtrl", l) } else { var d; d = c.isDesignateSet ? e.GetInitialDetail(!1, !0).EMPL_REC.EMAIL : o.GETENCRYPT_OUT_OBJ.CCMAIL, a.message = t("translate")("msg_notShared") + d + t("translate")("msg_notShared2") } else o.GETENCRYPT_OUT_OBJ.ERRMSG.trim().toLowerCase().indexOf("invalid credentials") > -1 || o.GETENCRYPT_OUT_OBJ.ERRMSG.trim().toLowerCase().indexOf("invalid login") > -1 || o.GETENCRYPT_OUT_OBJ.ERRMSG.trim().toLowerCase().indexOf("invalid user credentials") > -1 ? a.message = n.nonADinvalidMsg : "" != o.GETENCRYPT_OUT_OBJ.ERRMSG.trim() && (a.message = o.GETENCRYPT_OUT_OBJ.ERRMSG) }) } }]);